terragrunt] [/build/my-api] 2019/09/24 20:38:46 Running command: terraform --version
[terragrunt] 2019/09/24 20:38:46 Reading Terragrunt config file at /build/my-api/terraform.tfvars
[terragrunt] 2019/09/24 20:38:46 WARNING: no double-slash (//) found in source URL /myterraform/module-ecs.git. Relative paths in downloaded Terraform code may not work.
[terragrunt] 2019/09/24 20:38:46 Downloading Terraform configurations from git::https://git.example.com/myterraform/module-ecs.git?ref=4.2.0//modules/ecs-api into /build/my-api/.terragrunt-cache/xB6g3evGmrcyGV-s66yq4QBJbv4/USmutdXnoXw4m88el6B6U737cwA using terraform init
Copying configuration from "git::https://git.example.com/myterraform/module-ecs.git?ref=4.2.0//modules/ecs-api"...

Initializing provider plugins...

Missing required providers.

The following provider constraints are not met by the currently-installed
provider plugins:

* aws (~> 2.3.0)
* template (any version)

Terraform can automatically download and install plugins to meet the given
constraints, but this step was skipped due to the use of -get-plugins=false
and/or -plugin-dir on the command line.

If automatic installation is not possible or desirable in your environment,
you may manually install plugins by downloading a suitable distribution package
and placing the plugin's executable file in one of the directories given in
by -plugin-dir on the command line, or in the following directory if custom
plugin directories are not set:
    terraform.d/plugins/linux_amd64

Initializing the backend...

Successfully configured the backend "http"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider "aws" (2.3.0)...
- Downloading plugin for provider "template" (2.1.2)...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.template: version = "~> 2.1"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.template_file.init: Refreshing state...
data.aws_route53_zone.selected: Refreshing state...
data.aws_caller_identity.current: Refreshing state...
data.aws_iam_policy_document.ssm_policy: Refreshing state...
data.aws_iam_policy_document.ecs_task: Refreshing state...
aws_iam_role.ecs_task: Refreshing state... (ID: role-dev-my-service)
data.aws_security_group.security_group: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  - aws_iam_role.ecs_task


Plan: 0 to add, 0 to change, 1 to destroy.
